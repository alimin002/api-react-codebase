<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . '/libraries/REST_Controller.php';

// use namespace
use Restserver\Libraries\REST_Controller;
use Firebase\JWT\JWT;
use Firebase\JWT\Key;
use Firebase\JWT\JWK;
require_once APPPATH.'libraries/JWT.PHP';


/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Login extends REST_Controller {
 
    function __construct()
    {
       
        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");
        header("Access-Control-Allow-Headers: Content-Type,Authorization,Content-Length, Accept-Encoding");
        if ( "OPTIONS" === $_SERVER['REQUEST_METHOD'] ) {
            die();
        }
        // Construct the parent class
        parent::__construct();
        
        $this->load->helper(array('form', 'url'));
        $this->load->library('form_validation');
        $this->load->model('M_login', "mlogin");
        //$this->load->library('bcrypt');
        $this->load->library('encryption');

    }

    function create_password_get($password){
        $key=$this->config->item('encryption_key');
        $this->encryption->initialize(
            array(
                    'cipher' => 'aes-256',
                    'mode' => 'ctr',
                    'key' =>$key
            )
        );
        $this->response(["password"=>$this->encryption->encrypt($password)], REST_Controller::HTTP_OK);
    }

    function decrypt_password_get(){
        $password="756ea110eea2a923b1027878ae9b6ed36d8076632c7f4e264c26487492730b2dff1059b8b408d8f89faba5f65371505d8c502119326951232e2fc67bc9a11d9aYGxdG0PztPn8KZZEcRFPq5bw/o9Mvw==";
        $key=$this->config->item('encryption_key');
        $this->encryption->initialize(
            array(
                    'cipher' => 'aes-256',
                    'mode' => 'ctr',
                    'key' =>$key
            )
        );
        $this->response(["password"=>$this->encryption->decrypt($password)], REST_Controller::HTTP_OK);
    }


    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->input->post('name'),
            'email' => $this->input->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function doLogin_post()
    {
       

        $username=trim($this->post('username'));
        $password=trim($this->post('password'));
        
        $this->form_validation->set_rules('username', 'Username', 'required'); //function definition sytem/libraries/form_validation.php
        $this->form_validation->set_rules('password', 'Password', 'required');
 
        $key=$this->config->item('encryption_key');
        $this->encryption->initialize(
            array(
                    'cipher' => 'aes-256',
                    'mode' => 'ctr',
                    'key' =>$key
            )
        );
      
        $data_login = [
            'username' => $username,
            'password' =>$password,
           
        ];

        $this->form_validation->set_data($this->post());
        if (!$this->form_validation->run()) {
            $response=[
                "status"=>"failed",
                "message"=>"Kolom berikut ini tidak boleh kosong harap melengkapi kolom isian berikut". validation_errors(),

            ];

        }else{
            $data_auth=$this->mlogin->getLogin($data_login);
            
            if($data_auth){
               
                if($data_auth->username==$data_login["username"] and $this->encryption->decrypt($data_auth->password)== $data_login["password"]){
                    $key = $this->config->item("jwt_key");
                    $today=date('Y-m-d H:i:s');
                    $exp=date('Y-m-d H:i:s', strtotime($today. ' +1 day'));
                    $payload = array(
                        "username" =>$data_auth->username,
                        "email" =>$data_auth->email,
                        "exp"   =>strtotime($exp),
                    );

                    $jwt = JWT::encode($payload, $key, 'HS256');
                    $response=[
                        "token"=>$jwt,
                        "status"=>"success",
                        "username"=>$data_auth->username,
                        "user_code"=>$data_auth->user_code,
                        "email"=>$data_auth->email,
                        "message"=>"",
                    ];
                }else{
                    $response=[
                        "token"=>"",
                        "status"=>"failed",
                        "message"=>"Login Gagal!, Username atau password yang anda inputkan salah",
                    ];

                }
                

            }else{
                $response=[
                    "token"=>"",
                    "status"=>"failed",
                    "message"=>"Login Gagal!, Username atau password yang anda inputkan salah",
                ];
            }
        }
                $this->set_response($response, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}
